<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creates and defines all object variables

// Variable for the speed in which commands drop from the dropper(i.e. every 3 seconds)
dropSpeed = 3;

// Variable for the frequency in which commands drop from the dropper. (i.e. drop every 2 seconds).
dropFrequency = 2;

// Flag representing if the player has collided with a x2 drop speed command.
dropSpeedX2 = false;

// Flag representing if the player has collided with a invert direction command.
invertDirection = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sets invertDirection back to normal after the player has collided with an invertDirection command, and the duration of the penalty has ended.

invertDirection = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sets the dropSpeed back to 3 after a player has collided with a x2 speed command and the duration of the penalty has ended.

dropSpeed = 3;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drops a random command object everytime the alarm goes off.

// Random number generator that creates an index for the list of commands.
randomNumber=irandom_range(0,3);

// Random number generator for the x position in which the command will drop.
randomXPosition=irandom_range(880,1100);

// Lists that contain all of the commands.
commandList1[0] = obj_command3;
commandList1[1] = obj_command3;
commandList1[2] = obj_command2;
commandList1[3] = obj_command3;

pathList[0] = obj_path1;
pathList[1] = obj_path2;
pathList[2] = obj_path3;
pathList[3] = obj_path4;

fileList[0] = obj_badFile1
fileList[1] = obj_badFile2
fileList[2] = obj_badFile3
fileList[3] = obj_badFile4

if(obj_textBoxLevelMaster.currentCommandLength == 0)
{
    // Creates a command variable at the using the randomly generated x position, and
    // randomly genrated command list index.
    var command=instance_create(randomXPosition,0,commandList1[randomNumber]);
    // Changes the drop speed of the command to the dropSpeed variable.
    command.speed= dropSpeed;
    // Chagnes the direction that the command will drop. (270 = down).
    command.direction=270;
}
else if(obj_textBoxLevelMaster.currentCommandLength == 1)
{
    // Creates a command variable at the using the randomly generated x position, and
    // randomly genrated command list index.
    var command=instance_create(randomXPosition,0,pathList[randomNumber]);
    // Changes the drop speed of the command to the dropSpeed variable.
    command.speed= dropSpeed;
    // Chagnes the direction that the command will drop. (270 = down).
    command.direction=270;
}
else if(obj_textBoxLevelMaster.currentCommandLength == 2 || obj_textBoxLevelMaster.currentCommandLength == 3)
{
    // Creates a command variable at the using the randomly generated x position, and
    // randomly genrated command list index.
    var command=instance_create(randomXPosition,0,fileList[randomNumber]);
    // Changes the drop speed of the command to the dropSpeed variable.
    command.speed= dropSpeed;
    // Chagnes the direction that the command will drop. (270 = down).
    command.direction=270;
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handles the resetting of alarms.

// Checks if the game start flag is true.
if(obj_textBoxLevelMaster.puzzle3GameStart == true)
{
    
    //If game start is true, set the alarm that controls the frequency of the commands being dropped.
    if(alarm[0] == -1)
    {
        alarm[0] =  room_speed * dropFrequency;
    }
}


// Checks if the dropSpeedX2 flag is true. (i.e. if a player has collided with x2 command).
if(dropSpeedX2 == true)
{
    // If the dropSpeedX2 flag is true, sets the alarm that controls the duration of the penalty
    // to 5 seconds.
    if(alarm[1] == -1)
    {
        alarm[1] = room_speed * 5;
    }
}

// Checks if the invertDirection flag is true (i.e. if a player has collided wtih an invertDirection command).
if(invertDirection == true)
{
    // If the invertDirection flag is true then sets the alarm that controls the duration of the penalty
    // to 7 seconds.
    if(alarm[2] == -1)
    {
        alarm[2] = room_speed * 7;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
